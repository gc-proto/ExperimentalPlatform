{{- if (and .Values.minio.enabled .Values.minio.defaultBucket.enabled) }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "drupal.fullname" . }}-minio-init
  labels:
    app.kubernetes.io/name: {{ include "drupal.name" . }}
    helm.sh/chart: {{ include "drupal.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
data:
  initialize: |-
    #!/bin/sh
    # Based on https://github.com/helm/charts/blob/master/stable/minio/templates/_helper_create_bucket.txt

    set -e ; # Have script exit in the event of a failed command.

    # connectToMinio
    # Use a check-sleep-check loop to wait for Minio service to be available
    connectToMinio() {
      SCHEME=$1
      ATTEMPTS=0 ; LIMIT=29 ; # Allow 30 attempts
      set -e ; # fail if we can't read the keys.
      ACCESS=$(cat /config/accesskey) ; SECRET=$(cat /config/secretkey) ;
      set +e ; # The connections to minio are allowed to fail.
      echo "Connecting to Minio server: $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT" ;
      MC_COMMAND="mc config host add myminio $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT $ACCESS $SECRET" ;
      $MC_COMMAND ;
      STATUS=$? ;
      until [ $STATUS = 0 ]
      do
        ATTEMPTS=`expr $ATTEMPTS + 1` ;
        echo \"Failed attempts: $ATTEMPTS\" ;
        if [ $ATTEMPTS -gt $LIMIT ]; then
          exit 1 ;
        fi ;
        sleep 2 ; # 1 second intervals between attempts
        $MC_COMMAND ;
        STATUS=$? ;
      done ;
      set -e ; # reset `e` as active
      return 0
    }

    # Try connecting to Minio instance
    {{- if .Values.minio.tls.enabled }}
    scheme=https
    {{- else }}
    scheme=http
    {{- end }}
    connectToMinio $scheme

    # Configure public files
    mc policy download myminio/{{ .Values.minio.defaultBucket.name }}/{{ .Values.files.folders.public }}
{{- end }}
