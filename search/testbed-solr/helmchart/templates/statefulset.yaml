apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "{{ template "solr.fullname" . }}"
  namespace: {{ .Release.Namespace }}
{{- with .Values.persistent.annotations  }}
  annotations:
{{ toYaml . | indent 4 }}
{{- end }}
  labels:
    app: {{ template "solr.fullname" . }}
    release: "{{ .Release.Name }}"
spec:
  serviceName: {{ template "solr.fullname" . }}
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      release: {{ .Release.Name | quote }}
      app: {{ template "solr.name" . }}
  template:
    metadata:
      labels:
        heritage: {{ .Release.Service | quote }}
        release: {{ .Release.Name | quote }}
        chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
        app: {{ template "solr.name" . }}
        {{- include "solr.selectorLabels" . | nindent 8 }}
    spec:
      imagePullSecrets:
        - name: {{ .Values.image.pullSecret }}
      serviceAccountName: {{ include "solr.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
      - name: {{ template "solr.fullname" . }}
        securityContext:
          {{- toYaml .Values.securityContext | nindent 10 }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        ports:
          - name: http
            containerPort: {{ .Values.containerPort }}
            protocol: TCP
        env:
        - name: SOLR_DATA_HOME
          value: "{{ .Values.persistent.mountPath }}"
        livenessProbe:
          httpGet:
            path: /solr/admin/info/system
            port: {{ .Values.containerPort }}
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.livenessProbe.successThreshold }}
          failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
        readinessProbe:
          httpGet:
            path: /solr/admin/info/system
            port: {{ .Values.containerPort }}
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.readinessProbe.successThreshold }}
          failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
        resources:
          {{- toYaml .Values.resources | nindent 10 }}
        volumeMounts:
        - name: data
          mountPath: {{ .Values.persistent.mountPath }}
      imagePullSecrets:
        - name: {{ .Values.image.pullSecret }}
      volumes:
        - name: data
        {{- if not .Values.persistent.enabled }}
          emptyDir: {}
        {{- else }}
          persistentVolumeClaim:
            claimName: {{ template "solr.fullname" . }}
        {{- end }}
{{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
{{- end }}
{{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
{{- end }}
{{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
{{- end }}
  {{- if .Values.persistent.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: data
        annotations:
        {{- if .Values.persistent.annotations }}
{{ toYaml .Values.persistent.annotations | indent 10 }}
        {{- end }}
      spec:
        accessModes:
          - {{ .Values.persistent.accessMode | quote }}
      {{- if .Values.persistent.storageClass }}
      {{- if (eq "-" .Values.persistent.storageClass) }}
        storageClassName: ""
      {{- else }}
        storageClassName: "{{ .Values.persistent.storageClass }}"
      {{- end }}
      {{- end }}
        resources:
          requests:
            storage: "{{ .Values.persistent.size }}"
  {{- end }}
