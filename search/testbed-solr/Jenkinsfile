pipeline {
    agent none 
    
    options {
        // Only keep the 10 most recent builds
        buildDiscarder(logRotator(numToKeepStr:'10'))
    }
    stages {
        stage('Build') {
            agent {
                docker {
                    image 'maven:3-alpine'
                    args '-v /root/.m2:/root/.m2'
                }
            }
            steps {
                sh 'mvn -B -DskipTests clean package'
            }
        }
        stage('Test') {
            agent {
                docker {
                    image 'maven:3-alpine'
                    args '-v /root/.m2:/root/.m2'
                }
            }
            steps {
                sh 'mvn test'                
            }
            post {
                always {
                    // junit 'target/surefire-reports/*.xml'
                    echo 'finished test'
                }

            }
        }
        stage('Package') {
            agent {
                docker {
                    image 'maven:3-alpine'
                    args '-v /root/.m2:/root/.m2'
                }
            }
            steps {
                // installs the package into the local repository, 
                // for use as a dependency in other projects locally.
                sh 'mvn install'
            }
        }
        stage('Deploy Private Maven') {
            agent {
                docker {
                    image 'maven:3-alpine'
                    args '-v /root/.m2:/root/.m2'
                }
            }
            when {
                branch "master"
            }
            steps {
                // installs the package into the local repository, 
                // for use as a dependency in other projects locally.
                sh 'mvn deploy'
            }
        }
        stage('Build Docker Image') {
            agent any
            environment {
                registry = "tbs/testbed/solr"
                registryCredential = 'dockerNorconex'
              }
            // Build and push docker image only when in master branch
            when {
                branch "master"
            }
            steps {    
                script {
                    // Tag of image update as build number update
                    dockerImage = docker.build registry + ":$BUILD_NUMBER"
                    docker.withRegistry( 'https://docker.YOUR_HOST.com', registryCredential ) {                                                   
                        dockerImage.push()
                    }
                }
                sh "docker rmi $registry:$BUILD_NUMBER"      
            }                    
        }
        stage('Install Chart') {
            agent {
                docker {
                    image 'docker.YOUR_HOST.com/k8s/k8s-tools'
                    args ' -v /home/ubuntu:/opt/k8s -e HOME=/opt/k8s'
                }
            }
            // Build and push docker image only when in master branch
            when {
                branch "master"
            }
            steps {
                script {
                  // Install the latest helm chart with matching tag $BUILD_NUMBER
                  sh 'helm upgrade tbs-testbed-solr helmchart/ -i --set image.tag=$BUILD_NUMBER'
                }
            }
        }
    }
}